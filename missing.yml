---
- name: Sync Cathexis User Database
  hosts: other_servers
  become: false 
  tasks:

    - name: Ensure sqlite3 is installed
      package:
        name: sqlite3
        state: present

    - name: Check if Users and Password tables exist
      command: sqlite3 /home/ubuntu/nvr/users.db "SELECT name FROM sqlite_master WHERE type='table' AND (name='users' OR name='passwords');"
      register: db_check
      changed_when: false

    - name: Create Users table if it doesn't exist
      when: db_check.rc != 0
      command: >
        sqlite3 /home/ubuntu/nvr/users.db "CREATE TABLE IF NOT EXISTS Users (
          name TEXT UNIQUE PRIMARY KEY,
          is_enabled BOOL,
          access_level INT,
          unit_group INT,
          language INT,
          remote_access INT,
          hide_inaccessible_resources INT,
          can_change_own_password INT,
          is_ldap_user INT,
          currently_in_ldap INT
        );"

    - name: Create Passwords table if it doesn't exist
      when: db_check.rc != 0
      command: >
        sqlite3 /home/ubuntu/nvr/users.db "CREATE TABLE IF NOT EXISTS Passwords (
          name TEXT,
          type TEXT, -- ha1/des
          password TEXT
        );"

    - name: Create Passwords index if it doesn't exist
      when: db_check.rc != 0
      command: >
        sqlite3 /home/ubuntu/nvr/users.db "CREATE UNIQUE INDEX IF NOT EXISTS Passwords_name_type ON Passwords(name, type);"
        
- name: Sync users from gittest to server1 and server2
  hosts: all
  become: yes
  vars:
    db_path: "/home/ubuntu/nvr/users.db"
  
  tasks:
    - name: Fetch user list from gittest
      command: sqlite3 "{{ db_path }}" "SELECT * FROM users;"
      delegate_to: gittest
      register: gittest_users
      changed_when: false

    - name: Fetch user list from remote servers
      command: sqlite3 "{{ db_path }}" "SELECT * FROM users;"
      register: remote_users
      changed_when: false

    - name: Parse user lists into structured data
      set_fact:
        gittest_users_list: "{{ gittest_users.stdout_lines | map('split', '|') | list }}"
        remote_users_list: "{{ remote_users.stdout_lines | map('split', '|') | list }}"

    - name: Identify users needing updates
      set_fact:
        users_to_update: "{{ gittest_users_list | selectattr(0, 'in', remote_users_list | map(attribute=0) | list) | selectattr(10, '>', remote_users_list | selectattr(0, 'equalto', user[0]) | map(attribute=10) | first | default('')) | list }}"
      loop: "{{ gittest_users_list }}"
      loop_control:
        loop_var: user

    - name: Make updates to users
      command: >
        sqlite3 "{{ db_path }}" "UPDATE users
        SET is_enabled = '{{ item[1] }}',
          access_level = '{{ item[2] }}',
          unit_group = '{{ item[3] }}',
          language = '{{ item[4] }}',
          remote_access = '{{ item[5] }}',
          hide_inaccessible_resources = '{{ item[6] }}',
          can_change_own_password = '{{ item[7] }}',
          is_ldap_user = '{{ item[8] }}',
          currently_in_ldap = '{{ item[9] }}',
          last_modified = '{{ item[10] }}'
        WHERE name = '{{ item[0] }}';"
      loop: "{{ users_to_update }}" 
      loop_control:
        label: "{{ item[0] }}"
      when: users_to_update | length > 0
 
    - name: Identify missing users
      set_fact:
        missing_users: "{{ gittest_users_list | rejectattr(0, 'in', remote_users_list | map(attribute=0) | list) | list }}"

    - name: Debug missing users
      debug:
        var: missing_users

    - name: Insert missing users into remote databases
      command: >
        sqlite3 "{{ db_path }}" "INSERT INTO users 
        (name, is_enabled, access_level, unit_group, language, remote_access, hide_inaccessible_resources, can_change_own_password, is_ldap_user, currently_in_ldap, last_modified)
        VALUES ('{{ item[0] }}', {{ item[1] | int }}, {{ item[2] | int }}, {{ item[3] | int }}, {{ item[4] | int }}, {{ item[5] | int }}, {{ item[6] | int }}, {{ item[7] | int }}, {{ item[8] | int }}, {{ item[9] | int }}, '{{ item[10] }}');"
      loop: "{{ missing_users }}"
      loop_control:
        label: "{{ item[0] }}" 
      when: missing_users | length > 0

- name: Sync passwords
  hosts: all
  become: yes
  vars:
    db_path: "/home/ubuntu/nvr/users.db"
    
  tasks:

    - name: Fetch user list from gittest
      command: sqlite3 "{{ db_path }}" "SELECT * FROM Passwords;"
      delegate_to: gittest
      register: gittest_password
      changed_when: false

    - name: Fetch user list from remote servers
      command: sqlite3 "{{ db_path }}" "SELECT * FROM Passwords;"
      delegate_to: server1
      register: server_1
      changed_when: false

    - name: Parse user lists into structured data
      set_fact:
        gittest_users_list: "{{ gittest_password.stdout_lines | map('split', '|') | list }}"
        remote_users_list: "{{ server_1.stdout_lines | map('split', '|') | list }}"

    # - name: Fetch user list from remote servers
    #   command: sqlite3 "{{ db_path }}" "SELECT * FROM Passwords;"
    #   delegate_to: server2
    #   register: server_2
    #   changed_when: false 


