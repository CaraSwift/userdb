---
- name: Sync Cathexis User Database
  hosts: other_servers
  become: false 
  vars:
    db_path: "/home/ubuntu/nvr/users.db"
  tasks:

    - name: Ensure sqlite3 is installed
      package:
        name: sqlite3
        state: present

    - name: Check if Users and Password tables exist
      command: sqlite3 "{{ db_path }}" "SELECT name FROM sqlite_master WHERE type='table' AND (name='users' OR name='passwords');"
      register: db_checksqlite3
      changed_when: false
      failed_when: false

    - name: Copy data if doesn't exist
      when: "'users' not in db_checksqlite3.stdout"
      synchronize:
        src: "{{ db_path }}"
        dest: "{{ db_path }}"
        mode: push
      delegate_to: gittest
        
- name: Sync users from gittest to server1 and server2
  hosts: all
  become: yes
  vars:
    db_path: "/home/ubuntu/nvr/users.db"
  
  tasks:
    - name: Fetch user list from gittest
      command: sqlite3 "{{ db_path }}" "SELECT * FROM users;"
      delegate_to: gittest
      register: gittest_users
      changed_when: false

    - name: Fetch user list from remote servers
      command: sqlite3 "{{ db_path }}" "SELECT * FROM users;"
      register: remote_users
      changed_when: false

    - name: Parse user lists into structured data
      set_fact:
        gittest_users_list: "{{ gittest_users.stdout_lines | map('split', '|') | list }}"
        remote_users_list: "{{ remote_users.stdout_lines | map('split', '|') | list }}"

    - name: Identify users needing updates
      set_fact:
        users_to_update: "{{ gittest_users_list | selectattr(0, 'in', remote_users_list | map(attribute=0) | list) | selectattr(1, 'equalto', remote_users_list | selectattr(0, 'equalto', user[0]) | map(attribute=1) | first | default('')) | list }}"
      loop: "{{ gittest_users_list }}"
      loop_control:
        loop_var: user

    - name: Make updates to users
      command: >
        sqlite3 "{{ db_path }}" "UPDATE users
        SET is_enabled = '{{ item[1] }}',
          access_level = '{{ item[2] }}',
          unit_group = '{{ item[3] }}',
          language = '{{ item[4] }}',
          remote_access = '{{ item[5] }}',
          hide_inaccessible_resources = '{{ item[6] }}',
          is_ldap_user = '{{ item[8] }}',
          currently_in_ldap = '{{ item[9] }}'
        WHERE name = '{{ item[0] }}';"
      loop: "{{ users_to_update }}" 
      loop_control:
        label: "{{ item[0] }}"
      when: users_to_update | length > 0
 
    - name: Identify missing users
      set_fact:
        missing_users: "{{ gittest_users_list | rejectattr(0, 'in', remote_users_list | map(attribute=0) | list) | list }}"

    - name: Insert missing users into remote databases
      command: >
        sqlite3 /home/ubuntu/nvr/users.db "INSERT INTO users
          (name, is_enabled, access_level, unit_group, language, remote_access, hide_inaccessible_resources, can_change_own_password, is_ldap_user, currently_in_ldap)
          VALUES ('{{ item[0] }}', '{{ item[1] }}', '{{ item[2] }}', '{{ item[3] }}', '{{ item[4] }}', '{{ item[5] }}', '{{ item[6] }}', '{{ item[7] }}', '{{ item[8] }}', '{{ item[9] }}');"
      loop: "{{ missing_users }}"
      loop_control:
        loop_var: item

- name: Sync passwords
  hosts: all
  become: yes
  vars:
    db_path: "/home/ubuntu/nvr/users.db"
    
  tasks:

    - name: Fetch password list from gittest
      command: sqlite3 "{{ db_path }}" "SELECT u.name, p.type, p.password
        FROM users u
        JOIN Passwords p ON u.name = p.name
        WHERE u.can_change_own_password = 1;"
      register: gittest_password
      changed_when: false
      when: inventory_hostname == 'gittest'

    - name: Fetch password list from servers
      command: sqlite3 "{{ db_path }}" "SELECT u.name, p.type, p.password
        FROM users u
        JOIN Passwords p ON u.name = p.name
        WHERE u.can_change_own_password = 1;"
      register: server_password
      changed_when: false

    - name: debug updates
      debug: 
        var: gittest_password
 

    - name: Parse user lists into structured data
      set_fact:
        gittest_password_list: "{{ gittest_password.stdout_lines | map('split', '|') | list }}"
        server_password_list: "{{ server_password.stdout_lines | map('split', '|') | list }}"

    - name: Identify passwords needing updates
      set_fact:
        passwords_to_update: "{{ server_password_list | selectattr(0, 'in', gittest_password_list | map(attribute=0) | list) 
          | rejectattr(2, 'equalto', gittest_password_list | selectattr(0, 'equalto', user[0]) | map(attribute=2) | first | default('')) 
          | list }}"
      loop: "{{ server_password_list }}"
      loop_control:
        loop_var: user
  
    - name: debug updates
      debug: 
        var: passwords_to_update





































    - name: Update password on gittest
      command: >
        sqlite3 /home/ubuntu/nvr/users.db "UPDATE Passwords SET password = '{{ item[1] }}' WHERE name = '{{ item[0] }}';"
      loop: "{{ gittest_passwords.stdout_lines | map('split', '|') }}"
      loop_control:
        loop_var: item
      when: 
        - (gittest_passwords.stdout_lines | selectattr('0', 'equalto', item[0]) | map(attribute='1') | first) != (server1_passwords.stdout_lines | selectattr('0', 'equalto', item[0]) | map(attribute='1') | first)
        - (gittest_passwords.stdout_lines | selectattr('0', 'equalto', item[0]) | map(attribute='1') | first) != (server2_passwords.stdout_lines | selectattr('0', 'equalto', item[0]) | map(attribute='1') | first)

